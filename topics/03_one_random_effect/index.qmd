---
title: "Models with one level of hierarchy"
description: |
  Some of these things are somewhat like the others.
execute:
  freeze: true
comments:
  hypothesis: true
format:
  html:
    code-tools: true
editor_options: 
  chunk_output_type: console
---


:::{.callout-tip}
## Bayesian workflow

1. Visualize your data
2. Decide on your model structure
3. Simulate from the model to understand it
4. Fit the model to the data
5. Plot model predictions to evaluate the fit / draw conclusions
:::

Today's goal is to look at a couple of different model structures that we saw yesterday. 

## Load packages and data

```{r}
library(palmerpenguins)
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
library(tidyr)
# library(cmdstanr)
suppressPackageStartupMessages(library(rstan))
rstan_options("auto_write" = TRUE)
options(mc.cores = parallel::detectCores())
library(tidybayes)
```


## Gaussian random intercepts: Penguin body mass

**Are populations of penguins on different islands different in their body mass?**

The Palmer penguins are found on three different islands. Let's look at the distribution of body mass of each species on each island.

### Plot the data

First a bit of data cleaning and preparation.
First we select our variables. 
For this section we'll drop NA values in the predictor^[dropping NA values is not always the best idea! I'm doing it here to create a focused example. Bayes gives us other options for working with missing values, including modelling them directly.].
We'll create a new variable out of the union of the species and island names^[again, this is slightly contrived for the sake of making a clean example! normally you'd most likely treat these two variables separately.]
We'll also change the units of body mass to kilograms.
You can always transform a variable to more sensible units! 

```{r gauss-inter-setup}
penguin_mass_island <- penguins |> 
  select(species, island, body_mass_g) |> 
  tidyr::drop_na(body_mass_g) |> 
  tidyr::unite(sp_island, species, island) |> 
  ## center mass and change the units
  mutate(mass_kg = (body_mass_g)/1000)

knitr::kable(head(penguin_mass_island))
```

Let's visualize the distribution of body sizes for these species+island combinations:

```{r gauss-inter-plot}
#| fig-cap: Observations of the mass of penguins on five different species-island combinations.
penguin_mass_island |> 
  ggplot(aes(y = sp_island,
             x = mass_kg,
             colour = sp_island)) + 
  geom_jitter(alpha = 0.8, height = 0.1, width = 0) + 
  scale_color_brewer(palette = "Dark2") + 
  labs(x = "Mass in kg", y = "Species_Island")
```

It's always good to ask some questions about the dataset. 
Here is a simple one: are the sample sizes equal among the species-island combinations?

```{r}
penguin_mass_island |> 
  count(sp_island) |> 
  knitr::kable()
```

### Decide on a model structure

We'll begin by fitting a model that assumes that body size for each of these five groups is completely independent:

$$
\begin{align}
\text{Body mass}_i &\sim \text{Normal}(\mu_i, \sigma_{\text{obs}}) \\
\mu_i &= \bar\beta + \beta_{\text{group}[i]} \\
\bar\beta &\sim \text{Normal}(5, 2) \\
\beta_{\text{group}} &\sim \text{Normal}(0, 1) \\
\sigma_{\text{obs}} &\sim \text{Exponential}(.5)
\end{align}
$$

Here the subscript $i$ is just counting the row of the dataset, and $\text{group}[i]$ means the group (species+island) to which row number $i$ belongs.

### Simulate to understand this model {#sec-fixed-simulation}

Here's a little trick to get group indexes (numbers) from a character vector:

```{r}
group_names <- unique(penguin_mass_island$sp_island)
group_numbers <- seq_along(group_names)
names(group_numbers) <- group_names

group_numbers
```

```{r}
penguin_groupid <- penguin_mass_island |> 
  mutate(group_id = group_numbers[sp_island])

penguin_groupid
```

As you can see, we're set up now with the names and the indexes we need. 

Now we can simulate data and plot it:

```{r}
ngroup <- length(group_numbers)
overall_mean <- rnorm(1, mean = 5, sd = 2)
group_diffs <- rnorm(n = ngroup, mean = 0, sd = 1)
sigma_obs <- rexp(1, .5)

penguin_pred_obs <- penguin_groupid |> 
  mutate(fake_mass_avg = overall_mean + group_diffs[group_id],
         fake_mass_obs = rnorm(length(fake_mass_avg), 
                               mean = fake_mass_avg, 
                               sd = sigma_obs))

penguin_pred_obs |> 
  ggplot(aes(y = sp_island,
             x = fake_mass_obs,
             colour = sp_island)) + 
  geom_jitter(alpha = 0.8, height = 0.1, width = 0) + 
  scale_color_brewer(palette = "Dark2")

```

:::{.callout-tip}
### EXERCISE
Run the above code a few times, trying different prior values. 
:::

### Write it in Stan

```{r}
#| class-output: stan
fixed_groups <- stan_model(file = here::here("topics/03_one_random_effect/fixed_groups.stan"),
                           model_name = "fixed_groups")

fixed_groups
```

### Fit the model

Fitting the model requires arranging the data first, and creating a list which we then feed into Stan.

```{r}
peng_group_list <- with(penguin_groupid, 
         list(
           N = length(mass_kg),
           y = mass_kg,
           Ngroup = max(group_id),
           group_id = group_id
         ))

fixed_groups_samples <- sampling(fixed_groups,
  data = peng_group_list,
  refresh = 0L
)
```

### Plot predictions to evaluate results

Let's begin by plotting the averages for each group.

```{r}
fixed_groups_samples |> 
  gather_rvars(group_averages[group_id]) |> 
  mutate(sp_island = names(group_numbers)[group_id]) |> 
  ggplot(aes(y = sp_island, dist = .value)) + 
  stat_pointinterval() + 
  geom_jitter(data = penguin_mass_island,
              aes(y = sp_island,
                  x = mass_kg,
                  colour = sp_island), 
              pch = 21, inherit.aes = FALSE,
              alpha = 0.8, height = 0.1, width = 0) + 
  scale_colour_brewer(palette = "Dark2")
```


Some things to notice about the code above: 

* I'm using my named vector `group_numbers` to re-create the column `sp_island`. This is my technique for making sure I always use the correct label, but you can do this any way you want.
* We use `tidybayes::stat_pointinterval()` to summarize the posterior distribution.
* we're adding points from the original data (`penguin_mass_island`) with `geom_jitter()`. We're adding noise vertically to make the visualization better, but not adding any horizontal noise.

:::{.callout-tip}
### EXERCISE: plot posterior predictions of _observations_

Repeat the exercise above using the value of `one_obs_per_group`. 
Why are the results different? What additional error is included in these predictions?

:::

:::{.callout-note collapse="true"}
### SOLUTION

```{r}
fixed_groups_samples |> 
  tidybayes::gather_rvars(one_obs_per_group[group_id]) |> 
  mutate(sp_island = group_names[group_id]) |> 
  ggplot(aes(y = sp_island,
             dist = .value,
             colour = sp_island)) + 
  stat_pointinterval(colour = "black") + 
  geom_jitter(
    aes(y = sp_island,
        x = mass_kg,
        colour = sp_island), 
    inherit.aes = FALSE,
    alpha = .2, data = penguin_groupid, height = .2, width = 0) + 
  scale_colour_brewer(palette = "Dark2")

```

:::

### Make it hierarchical

#### Math


:::{.column-screen}

::::{.columns}

::: {.column width="2.5%"}
:::

::: {.column width="45%"}
$$
\begin{align}
\text{Body mass}_i &\sim \text{Normal}(\mu_i, \sigma_{\text{obs}}) \\
\mu_i &= \bar\beta + \beta_{\text{group}[i]} \\
\bar\beta &\sim \text{Normal}(5, 2) \\
\beta_{\text{group}} &\sim \text{Normal}(0, 1) \\
\sigma_{\text{obs}} &\sim \text{Exponential}(.5)
\end{align}
$$
:::

::: {.column width="5%"}

:::

::: {.column width="45%"}
$$
\begin{align}
\text{Body mass}_i &\sim \text{Normal}(\mu_i, \sigma_{\text{obs}}) \\
\mu_i &= \bar\beta + \beta_{\text{group}[i]} \\
\bar\beta &\sim \text{Normal}(5, 2) \\
\beta_{\text{group}} &\sim \text{Normal}(0, \sigma_{\text{sp}}) \\
\sigma_{\text{obs}} &\sim \text{Exponential}(.5) \\
\sigma_{\text{sp}} &\sim \text{Exponential}(1)
\end{align}
$$

:::

::: {.column width="2.5%"}

:::

::::

:::

#### Simulation of a hierarchical model

:::{.callout-tip}
### EXERCISE 
Simulate from the model above. Base your approach on the [code for simulation the non-hierarchical version](#sec-fixed-simulation). 
Remember to simulate one additional number: the standard deviation of group differences
:::

:::{.callout-note collapse="true"}
### SOLUTION
```{r}
ngroup <- length(group_numbers)
overall_mean <- rnorm(1, mean = 5, sd = 2)
sigma_group <- rexp(1, .1)
group_diffs <- rnorm(n = ngroup, mean = 0, sd = sigma_group)
sigma_obs <- rexp(1, .5)

penguin_pred_obs <- penguin_groupid |> 
  mutate(fake_mass_avg = overall_mean + group_diffs[group_id],
         fake_mass_obs = rnorm(length(fake_mass_avg), 
                               mean = fake_mass_avg, 
                               sd = sigma_obs))

penguin_pred_obs |> 
  ggplot(aes(y = sp_island,
             x = fake_mass_obs,
             colour = sp_island)) + 
  geom_jitter(alpha = 0.8, height = 0.1, width = 0) + 
  scale_color_brewer(palette = "Dark2")

```
:::

#### Stan


Below I'm comparing the two Stan programs side-by-side. Compare them to the models above! 

```{r}
hierarchical_groups <- stan_model(
  file = "topics/03_one_random_effect/hierarchical_groups.stan")
```

:::{.column-screen}

::::{.columns}

::: {.column width="2.5%"}
:::

::: {.column width="45%"}
```{r}
#| class-output: stan
fixed_groups
```

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}

```{r}
#| class-output: stan
hierarchical_groups
```


:::

::: {.column width="2.5%"}

:::

::::

:::



```{r}
hierarchical_groups_samples <- sampling(hierarchical_groups,
  data = peng_group_list, refresh = 0)
```

```{r}
hierarchical_groups_samples
```

```{r}
hierarchical_groups_samples |> 
  tidybayes::gather_rvars(b_group[group_id],
                          new_b_group) |> 
  mutate(sp_island = group_names[group_id],
         sp_island = if_else(is.na(sp_island),
                             true = "New Group",
                             false = sp_island)) |> 
  ggplot(aes(y = sp_island,
             dist = .value,
             colour = sp_island)) + 
  stat_pointinterval()
```


```{r}
hierarchical_groups_samples |> 
  tidybayes::gather_rvars(one_obs_per_group[group_id],
                          one_obs_new_group) |> 
  mutate(sp_island = group_names[group_id],
         sp_island = if_else(is.na(sp_island),
                             true = "New Group",
                             false = sp_island)) |> 
  ggplot(aes(y = sp_island,
             dist = .value,
             colour = sp_island)) + 
  stat_pointinterval() + 
  geom_point(aes(y = sp_island,
             x = mass_kg,
             colour = sp_island), 
             inherit.aes = FALSE,
             alpha = .7,
             data = penguin_groupid,
             position = position_jitter(width = 0, height = .2))
```


### Exercises

1. Try leaving out a group and refitting the hierarchical model. Are the predictions for the missing group accurate?
1. There are other categorical predictors in the dataset. Try including `year` as a part of the group-creating factor (i.e. in the call to `unite()` above). What changes?
1. Modify the `generated quantities` block to simulate a fake observation for EVERY row of the dataset. This opens the possibility of using `bayesplot` to make predictions. Look back at the code from Day 1 and create a posterior predictive check for both models. (e.g. using `ppc_dens_overlay`)
1. We could perhaps have used `sex` as a grouping factor, but `sex` has missing values in it! Why is this a problem for this kind of model? What would it take to address that? (Discussion only; missing values are unfortunately outside the scope of the class!)

## Observation-level random effects: Mite abundance

### What is the question? 

Let's write a model to answer the question:  

**How does the total abundance of the mite community change as water content increases?**  

### Express this in Math

Here's a partially complete model for species richness over time

$$
\begin{align}
\text{S}_i &\sim \text{Poisson}(e^a) \\
a &= \bar\beta + \beta_{\text{water}} \cdot \text{water}_i \\
\bar\beta &\sim \text{Normal}(?, ?) \\
\beta_{\text{water}} &\sim \text{Normal}(?, ?) \\
\end{align}
$$

:::{.callout-tip}
### EXERCISE 
Simulate from this model, and look at your simulations to decide on a reasonable prior for the data.
:::

:::{.callout-note collapse="true"}
### SOLUTION
```{r}
n <- 30
water <- seq(from = -5, to = 5, length.out = n)

b0 <- rnorm(1, mean = log(17), sd = .3)
b1 <- rnorm(1, mean = 0, sd = .2)

S <- rpois(n, lambda = exp(b0 + b1*water))
plot(water, S)
```
:::

### Data preparation & visualization

First we need to load and prepare the data:

```{r}
data(mite, package = "vegan")
data("mite.env", package = "vegan")

# combine data and environment

mite_data_long <- mite |> 
  tibble::rownames_to_column(var = "site_id") |> 
  bind_cols(mite.env) |> 
  pivot_longer(Brachy:Trimalc2,
               names_to = "spp", values_to = "abd")
```


First let's transform the mite dataset into a dataframe of total community abundance (N) per site. 
We'll also standardize the water content while we're at it:

```{r}
mite_community_abd <- mite_data_long |> 
  group_by(site_id, WatrCont) |> 
  summarize(N = sum(abd)) |>
  ungroup() |> 
  mutate(water_c = (WatrCont - mean(WatrCont))/100)

knitr::kable(head(mite_community_abd))
```

We get a nice histogram of community abundance, and a clear negative relationship with water volume:

```{r}
#| layout-ncol: 2
mite_community_abd |> 
  ggplot(aes(x = N)) + 
  geom_histogram()

mite_community_abd |> 
  ggplot(aes(x = water_c, y = N)) + 
  geom_point()
```

### Write the model in Stan and estimate it

This model will have a structure very similar to previous ones we've seen. 
The main difference is the use of the `poisson_log` function:

```{r}
#| class-output: stan
poisson_regression <- stan_model(
  file = "topics/03_one_random_effect/poisson_regression.stan",
  model_name = "poisson_regression")

poisson_regression
```

:::{.callout-note}
### Built in Stan functions

Stan has a lot of built-in functions to facilitate modelling. 
For example the log link function is so common that there is a specialized likelihood function just for that, `poisson_log`. And there's an even more efficient version called `poisson_log_glm`. I didn't use it here because I wanted to code to closely match the equations. You can read about these functions (and much more!) in the amazing [Stan manual](https://mc-stan.org/docs/functions-reference/unbounded_discrete_distributions.html#poisson)
:::

Using a now-familiar workflow, we feed the data into the model:

```{r}

water_for_pred <- seq(from = -3, to = 4.5, length.out = 15)

abd_data_list <- list(N = length(mite_community_abd$N),
              water = mite_community_abd$water_c,
              y = mite_community_abd$N,
              Npred = 15,
              water_pred = water_for_pred)

poisson_regression_sample <- sampling(
  poisson_regression,
  data = abd_data_list,
  refresh = 0)
```

### Plot the model to see if it fits well

```{r}
#| layout-ncol: 2
poisson_regression_sample |> 
  tidybayes::gather_rvars(line_obs[i]) |> 
  mutate(water = water_for_pred) |> 
  ggplot(aes(x = water, dist = .value)) + 
  stat_lineribbon() + 
  geom_point(aes(x = water_c, y = N), 
             data = mite_community_abd, 
             inherit.aes = FALSE) + 
  scale_fill_brewer(palette = "Greens")

fake_obs_S <- rstan::extract(poisson_regression_sample, pars = "fake_obs")

bayesplot::ppc_dens_overlay(y = mite_community_abd$N,
                            yrep = head(fake_obs_S$fake_obs, 50))
```

Remember, on the left we are plotting the _*Prediction interval*_ here: it's showing the distribution of probable observations according to the model. Notice that the the model predicts much narrower variation than we really find!   

On the right hand side we have the posterior predictive check, which once again shows that the model is overconfident and predicts a range of observations that are far too narrow.  


:::{.callout-tip
### EXERCISE

1) Discuss with your neighbours: would you trust this model? Would you publish it? The technical name for this phenomenon is "overdisperson". Have you checked for this in previous count models you've done?

2) Add a random effect for _every individual observation_ in the model. Begin by writing the mathematical notation for this new model! 

3) fit the model and re-create the two figures above. What do you notice? 

* Which model is more trustworthy?
* look at the slope in the new model. Is it different?

:::

:::{.callout-note collapse="true"}
### SOLUTION


#### Mathematical notation

$$
\begin{align}
\text{S}_i &\sim \text{Poisson}(e^a) \\
a &= \bar\beta + \beta_{\text{water}} \cdot \text{water}_i + \text{site}_i\\
\bar\beta &\sim \text{Normal}(?, ?) \\
\beta_{\text{water}} &\sim \text{Normal}(?, ?) \\
\text{site} &\sim \text{Normal}(?, \sigma) \\
\sigma &\sim \text{Exponential}(?)
\end{align}
$$

#### Stan code 

Write the model

```{r}
#| class-output: stan
poisson_regression_overdisp <- stan_model(
  file = "topics/03_one_random_effect/poisson_regression_overdisp.stan",
  model_name = "poisson_regression_overdisp")

poisson_regression_overdisp
```

Sample it

```{r}
poisson_regression_overdisp_sample <- sampling(
  poisson_regression_overdisp, 
  data = abd_data_list, refresh = 0
  )
```


```{r}
#| layout-ncol: 2
#| 
fake_obs_overdisp_S <- rstan::extract(poisson_regression_overdisp_sample, pars = "fake_obs")

bayesplot::ppc_dens_overlay(y = mite_community_abd$N,
                            yrep = head(fake_obs_overdisp_S$fake_obs, 50))

poisson_regression_overdisp_sample |> 
  tidybayes::gather_rvars(line_obs[i]) |> 
  mutate(water = water_for_pred) |> 
  ggplot(aes(x = water, dist = .value)) + 
  stat_lineribbon() + 
  geom_point(aes(x = water_c, y = N), 
             data = mite_community_abd, 
             inherit.aes = FALSE)
```

:::

:::{.callout-note}
## Bonus exercises

Compare the slope estimates between the two poisson models above (possibly in the same figure). What happened here?

Another great way to model overdispersion is via the [Negative Binomial](https://en.wikipedia.org/wiki/Negative_binomial_distribution) distribution. Look at the Stan documentation for [neg_binomial_2_log](https://mc-stan.org/docs/functions-reference/neg-binom-2-log.html) and adapt your model to use it (don't forget to drop the random effect when you do!).

EXPERIMENTAL: replace the normal distribution for the random observation-level effect with the student_t distribution, to help with that one extreme datapoint! how does the slope change?
:::
