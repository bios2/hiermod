---
title: "Summarizing many univariate models"
description: |
  A secret weapon for when you're building hierarchical models.
execute:
  freeze: true
format:
  html:
    code-tools: true
editor_options: 
  chunk_output_type: console
---

We've already looked at univariate models. When we fit the same model to multiple different groups, we don't expect the same values for all the coefficients. Each thing we are studying will respond to the same variable in different ways.

Hierarchial models represent a way to *model* this variation, in ways that range from simple to complex.

Before we dive in with hierarchical structure, let's build a bridge between these two approaches.

This is useful to help us understand what a hierarchical model does.

However it is also useful from a strict model-building perspective -- so useful that [Andrew Gelman calls it a "Secret Weapon"](https://statmodeling.stat.columbia.edu/2005/03/07/the_secret_weap/)

```{r}
data(mite, package = "vegan")
data("mite.env", package = "vegan")
library(tidyverse)
library(cmdstanr)

# combine data and environment
mite_data_long <- bind_cols(mite.env, mite) |> 
  pivot_longer(Brachy:Trimalc2, names_to = "spp", values_to = "abd")
```

To keep things simple and univariate, let's consider only water:

First, a quick word about centering and scaling a predictor variable:

1.  I center the predictor by subtracting the mean. This changes the *intercept* of my linear predictor. it becomes the mean log-odds of occurrance when the water content is average
2.  I divide water content by 100. The dataset has units of **grams per Litre** of water (see `?vegan::mite.env` for more details). This is fine, but I don't think mites are able to sense differences as precise as a millimeter of water either way. by dividing by 10 I transform this into centilitres, which is more informative.

```{r}
mite_data_long_transformed <- mite_data_long |> 
  mutate(presabs = as.numeric(abd>0),
         # center predictors
         water = (WatrCont - mean(WatrCont)) / 100
         )

mite_data_long_transformed |> 
  ggplot(aes(x = water, y = presabs)) + 
  geom_point() + 
  stat_smooth(method = "glm", method.args = list(family = "binomial")) + 
  facet_wrap(~spp)
```

some things to notice about this figure:

-   the x-axis scale has been transformed from "grams per litre" to "centilitres away from average
-   there is a ton of variation in how different species respond to water!

```{r}
mite_many_glms <- mite_data_long_transformed |> 
  nest_by(spp) |> 
  mutate(logistic_regressions = list(
    glm(presabs ~ water,
        family = "binomial",
        data = data))) |> 
  mutate(coefs = list(broom::tidy(logistic_regressions)))
```

:::{.callout-note}
## Split-Apply-Combine

To explore this kind of thinking, we are going to use an approach sometimes called ["split-apply-combine"](https://vita.had.co.nz/papers/plyr.pdf)

There are many possible ways to do this in practice. We are using a technique here from the tidyverse, which you can [read more about](https://dplyr.tidyverse.org/articles/rowwise.html).
:::

```{r}
mite_many_glm_coefs <- mite_many_glms |> 
  select(-data, -logistic_regressions) |> 
  unnest(coefs)

mite_many_glm_coefs |> 
  ggplot(aes(x = estimate, y = spp,
             xmin = estimate - std.error,
             xmax = estimate + std.error)) + 
  geom_pointrange() + 
  facet_wrap(~term, scales = "free")
```

As you can see, some of these estimates are high, others low. We could also plot these as histograms to see this distribution.

```{r}
mite_many_glm_coefs |> 
  ggplot(aes(x = estimate)) + 
  geom_histogram(binwidth = .5) + 
  facet_wrap(~term, scales = "free")
```

Once again, the two parameters of this model represent:

-   *Intercept* The probability (in log-odds) of a species being present at the average water concentration. some species are common, others are rare.
-   *water* this is the change in probability (in log-odds) as water increases by one centilitre per litre of substrate.

## Say it in Stan

The above tidyverse approach is very appealing and intuitive, but we can also do the same procedure in Stan.

```{r}
#| class-output: stan
all_species_unpooled <- cmdstan_model(
  stan_file = "topics/correlated_effects/all_species_unpooled.stan", 
  pedantic = TRUE)

all_species_unpooled
```

Let's fit this model by passing in the data:

```{r}
mite_bin <- mite
mite_bin[mite_bin>0] <- 1

mite_pa_list <- list(
      Nsites = nrow(mite_bin),
      S = ncol(mite_bin),
      x = with(mite.env, (WatrCont - mean(WatrCont))/100),
      y = as.matrix(mite_bin)
    )

all_species_unpooled_posterior <- 
  all_species_unpooled$sample(
    data = mite_pa_list, 
    refresh = 1000, parallel_chains = 4
    )
```

now let's try to plot this:

```{r}
#| warning: false
# start by looking at the names of variables
# get_variables(all_species_unpooled_posterior)

post_pred <- tidybayes::spread_rvars(all_species_unpooled_posterior, 
             intercept[spp_id], slope[spp_id]) |> 
  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> 
  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),
         spp = colnames(mite_bin)[spp_id]) |> 
  ggplot(aes(x = water, dist = prob)) + 
  tidybayes::stat_lineribbon() + 
  facet_wrap(~spp) + 
  scale_fill_brewer(palette = "Greens")

post_pred
```

We can imitate the original figure by adding the observed data in orange:

```{r}
#| warning: false
#| fig-height: 9
#| fig-width: 7
post_pred + 
  geom_point(aes(x = water, y = presabs), 
             inherit.aes = FALSE, 
             data = mite_data_long_transformed,
             pch = 21, 
             fill = "orange")
```

:::{.callout-tip}
### EXERCISE
1) Add hierarchy to both the slope AND the intercept of this model. 
Do not try to model them as correlated: the `lmer` syntax would be `y ~ 1 + water + (1 | species) + (0 + water | species)`  

2) Make a plot of the slope coefficients from both models, with and without hierarchy. 
Are they the same? How are they different?

2) Make a posterior prediction of species richness in these communities.
:::

:::{.callout-note collapse="true"}
### SOLUTION

First we rewrite the Stan model from above, replacing the standard deviations with parameters. We do this for the priors on the intercepts and slopes _separately_.

```{r}
#| class-output: stan
all_species_partpooled <- cmdstan_model(
  stan_file = "topics/correlated_effects/all_species_partpooled.stan", 
  pedantic = TRUE)

all_species_partpooled
```

Sample the model

```{r}

all_species_partpooled_posterior <- 
  all_species_partpooled$sample(
    data = mite_pa_list, 
    refresh = 1000, parallel_chains = 4
    )
```

Plot posterior predictions of trendlines, just as before:

```{r}
#| fig-height: 9
#| fig-width: 7
post_pred_partpooled <- tidybayes::spread_rvars(all_species_partpooled_posterior, 
             intercept[spp_id], slope[spp_id]) |> 
  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> 
  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),
         spp = colnames(mite_bin)[spp_id]) |> 
  ggplot(aes(x = water, dist = prob)) + 
  tidybayes::stat_lineribbon() + 
  facet_wrap(~spp) + 
  scale_fill_brewer(palette = "Reds") +
  geom_point(aes(x = water, y = presabs), 
             inherit.aes = FALSE, 
             data = mite_data_long_transformed,
             pch = 21, 
             fill = "blue")

post_pred_partpooled
```

#### Comparing slope estimates of both models



```{r}
unpooled_slopes <- tidybayes::spread_rvars(all_species_unpooled_posterior, 
              slope[spp_id]) |> 
  mutate(type = "non-hierarchical")

partpooled_slopes <- tidybayes::spread_rvars(all_species_partpooled_posterior, 
              slope[spp_id]) |> 
  mutate(type = "hierarchical")


partpooled_slopes |> 
  bind_rows(unpooled_slopes) |> 
  mutate(species = colnames(mite_bin)[spp_id],
         med_slope = median(slope),
         species = forcats::fct_reorder(species, med_slope)) |> 
  ggplot(aes(x = species, dist = slope, colour = type)) + 
  stat_pointinterval(position = position_dodge(width = .5)) + 
  # facet_wrap(~type)
  NULL

```


#### Posterior distribution of species richness

```{r}
tidybayes::spread_draws(all_species_partpooled_posterior, 
             intercept[spp_id], slope[spp_id], ndraws = 700) |> 
  expand_grid(water = seq(from = -8, to = 6, length.out = 10)) |> 
  mutate(prob = plogis(intercept + slope*water),
         spp = colnames(mite_bin)[spp_id]) |> 
  nest_by(water, .draw) |> 
  mutate(S = sum(data$prob)) |> 
  select(-data) |> unnest() |> 
  ggplot(aes(x = water, y = S)) + 
  tidybayes::stat_lineribbon() + 
  scale_fill_brewer(palette = "Blues", direction = -1)
```


:::







:::{.callout-warning}
## Covariance matrices

If you've fit a lot of hierarchical models you may know that usually, slopes and intercepts are modelled as correlated. In this course, we've decided to stop here, but the material below is available for anyone who wants. Fist I show how to rewrite the fixed-effect model above.

:::


## Saying it another way: with matrix algebra

First let's look at how to scale a univariate distribution:

```{r}
#| layout-ncol: 2
z <- rnorm(300, mean = 0, sd = 1)
hist(z)
sd(z)

hist(z*2.7)
sd(z*2.7)
```

you can also scale two things at once with a diagonal matrix:

```{r}
two_sds <- diag(c(.4, 7))

zz <- matrix(rnorm(200), ncol = 2)

rescaled_zz <- zz %*% two_sds

plot(rescaled_zz)

apply(rescaled_zz, 2, sd)
```

We can apply this approach in Stan to create the SAME model as above:

```{r}
#| class-output: stan
all_species_unpooled_diag <- cmdstan_model(
  stan_file = "topics/correlated_effects/all_species_unpooled_diag.stan", 
  pedantic = TRUE)

all_species_unpooled_diag
```

```{r}
all_species_unpooled_diag_sample <- all_species_unpooled_diag$sample(
  data = mite_pa_list, 
  refresh = 1000, parallel_chains = 4
)
```


## Making it hierarchical

```{r}
#| class-output: stan
all_species_partpooled_diag <- cmdstan_model(
  stan_file = "topics/correlated_effects/all_species_partpooled_diag.stan", 
  pedantic = TRUE)

all_species_partpooled_diag
```




## Modelling COvariation

```{r}
#| class.output: stan

all_species_partpooled_diag_corr <- cmdstan_model(
  stan_file = "topics/correlated_effects/all_species_partpooled_diag_corr.stan", 
  pedantic = TRUE)

all_species_partpooled_diag_corr
```

```{r}
mite_data_list <- list(
  Nsites = nrow(mite_bin),
  S = ncol(mite_bin),
  x = cbind(1, with(mite.env, (WatrCont - mean(WatrCont))/100)),
  y = as.matrix(mite_bin))

all_species_partpooled_diag_corr_posterior <- 
  all_species_partpooled_diag_corr$sample(
  data = mite_data_list,
  refresh = 0, parallel_chains = 4)
```


plot these, reproducing the figure from earlier:

```{r}

# get the unpooled numbers
unpooled_slopes <- all_species_unpooled_posterior |> 
  tidybayes::spread_rvars(slope[spp])

# tidybayes::get_variables(all_species_partpooled_diag_posterior)

partpooled_slopes <- all_species_partpooled_diag_corr_posterior |> 
  tidybayes::spread_rvars(beta[param, spp]) |> 
  filter(param == 2)

left_join(unpooled_slopes,
          partpooled_slopes,
          by = "spp") |> 
  ggplot(aes(x = median(slope), y = median(beta))) + 
  geom_point() + 
  geom_abline(intercept = 0, slope = 1)

```

## 

```{r}
unpooled_params <- all_species_unpooled_posterior |> 
  tidybayes::spread_rvars(slope[spp], intercept[spp]) |> 
  mutate(slope = median(slope), 
         intercept = median(intercept))



all_species_partpooled_diag_corr_posterior |> 
  tidybayes::spread_rvars(beta[param, spp]) |> 
  mutate(beta = median(beta),
         param = c("intercept", "slope")[param]) |> 
  pivot_wider(names_from = "param", values_from = beta) |> 
  ggplot(aes(x = intercept, y = slope)) + 
  geom_point() + 
  geom_point(data = unpooled_params, col = "red")

```



## Correlating numbers with a cholesky decomposition of a correlation matrix.

```{r}
eg <- rethinking::rlkjcorr(1, 2, 1)
cc <- chol(eg)

zz <- matrix(data = rnorm(2000), ncol = 2)
plot(zz)
cor(zz)

rr <- t(cc) %*% t(zz)
plot(t(rr))
cor(t(rr))[1,2]

```

The LKJ prior distribution is a prior over correlation matrices

```{r}
# rethinking::rlkjcorr(1, 5, .3)
```



```{r}
# correlation between both parts (pres-abs and also the mean of the count) comes from a BETA distribution (not a scaled beta). so it is always positive, because we assume that an animal which is very common when found is also found in many sites. 
# Is there a known relationship between incidence and abundance? surely. That could be an excellent step 2, to show that .
# Actually it seems like its a bit of a controversy! https://en.wikipedia.org/wiki/Occupancy%E2%80%93abundance_relationship

# can a GP output a vector of values? how exactly. And if so, could output a pair of species coefs for both the logit (present) and count (poisson) model. 
```

