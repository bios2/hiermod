{
  "hash": "394f9f9948373d43ea0f3956926ffc66",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Summarizing many univariate models\"\ndescription: |\n  A secret weapon for when you're building hierarchical models.\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\nWe've already looked at univariate models. When we fit the same model to multiple different groups, we don't expect the same values for all the coefficients. Each thing we are studying will respond to the same variable in different ways.\n\nHierarchial models represent a way to *model* this variation, in ways that range from simple to complex.\n\nBefore we dive in with hierarchical structure, let's build a bridge between these two approaches.\n\nThis is useful to help us understand what a hierarchical model does.\n\nHowever it is also useful from a strict model-building perspective -- so useful that [Andrew Gelman calls it a \"Secret Weapon\"](https://statmodeling.stat.columbia.edu/2005/03/07/the_secret_weap/)\n\n## Loading models and data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(dplyr))\nlibrary(ggplot2)\nlibrary(tidyr)\n# library(cmdstanr)\nsuppressPackageStartupMessages(library(rstan))\nrstan_options(\"auto_write\" = TRUE)\noptions(mc.cores = parallel::detectCores())\nlibrary(tidybayes)\n\ndata(mite, package = \"vegan\")\ndata(\"mite.env\", package = \"vegan\")\n```\n:::\n\n\n\nAnd some quick data restructuring to combine both.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine data and environment\nmite_data_long <- bind_cols(mite.env, mite) |> \n  pivot_longer(Brachy:Trimalc2, names_to = \"spp\", values_to = \"abd\")\n```\n:::\n\n\n\nTo keep things simple and univariate, let's consider only water concentration as an independent variable.\n\nFirst, a quick word about centering and scaling a predictor variable:\n\n1.  I center the predictor by subtracting the mean. This changes the *intercept* of my linear predictor. it becomes the mean log-odds of occurrance when the water content is average\n2.  I divide water content by 100. The dataset has units of **grams per Litre** of water (see `?vegan::mite.env` for more details). This is fine, but I don't think mites are able to sense differences as precise as a millimeter of water either way. by dividing by 10 I transform this into centilitres, which is more informative.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_data_long_transformed <- mite_data_long |> \n  mutate(presabs = as.numeric(abd>0),\n         # center predictors\n         water = (WatrCont - mean(WatrCont)) / 100\n         )\n\nmite_data_long_transformed |> \n  ggplot(aes(x = water, y = presabs)) + \n  geom_point() + \n  stat_smooth(method = \"glm\", method.args = list(family = \"binomial\")) + \n  facet_wrap(~spp)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/smoothglm-1.png){width=672}\n:::\n:::\n\n\n\nsome things to notice about this figure:\n\n-   the x-axis scale has been transformed from \"grams per litre\" to \"centilitres away from average\n-   there is a ton of variation in how different species respond to water!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glms <- mite_data_long_transformed |> \n  nest_by(spp) |> \n  mutate(logistic_regressions = list(\n    glm(presabs ~ water,\n        family = \"binomial\",\n        data = data))) |> \n  mutate(coefs = list(broom::tidy(logistic_regressions)))\n```\n:::\n\n\n\n:::{.callout-note}\n## Split-Apply-Combine\n\nTo explore this kind of thinking, we are going to use an approach sometimes called [\"split-apply-combine\"](https://vita.had.co.nz/papers/plyr.pdf)\n\nThere are many possible ways to do this in practice. We are using a technique here from the tidyverse, which you can [read more about](https://dplyr.tidyverse.org/articles/rowwise.html).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glm_coefs <- mite_many_glms |> \n  select(-data, -logistic_regressions) |> \n  unnest(coefs)\n\nmite_many_glm_coefs |> \n  ggplot(aes(x = estimate, y = spp,\n             xmin = estimate - std.error,\n             xmax = estimate + std.error)) + \n  geom_pointrange() + \n  facet_wrap(~term, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/coef_plot-1.png){width=672}\n:::\n:::\n\n\n\nAs you can see, some of these estimates are high, others low. We could also plot these as histograms to see this distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_many_glm_coefs |> \n  ggplot(aes(x = estimate)) + \n  geom_histogram(binwidth = .5) + \n  facet_wrap(~term, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/secretweapon_hist-1.png){width=672}\n:::\n:::\n\n\n\nOnce again, the two parameters of this model represent:\n\n-   *Intercept* The probability (in log-odds) of a species being present at the average water concentration. some species are common, others are rare.\n-   *water* this is the change in probability (in log-odds) as water increases by one centilitre per litre of substrate.\n\n## Say it in Stan\n\nThe above tidyverse approach is very appealing and intuitive, but we can also do the same procedure in Stan.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_species_unpooled <- stan_model(\n  file = \"topics/correlated_effects/all_species_unpooled.stan\")\n\nall_species_unpooled\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'anon_model' coded as follows:\ndata {\n  // number of rows in dataset\n  int<lower=0> Nsites;\n  // number of species\n  int<lower=0> S;\n  // one environmental variable to use in prediction\n  vector[Nsites] x;\n  // response site (rows) by species (columns) 2D array\n  array[Nsites,S] int <lower=0,upper=1> y;\n}\nparameters {\n  // parameters are now VECTORS\n  vector[S] intercept;\n  vector[S] slope;\n}\nmodel {\n  for (s in 1:S){\n    y[,s] ~ bernoulli_logit(intercept[s] + slope[s] * x);\n  }\n  // priors don't change because Stan is vectorized:\n  // every element of the vector gets the same prior\n  intercept ~ normal(0, 3);\n  slope ~ normal(0, 3);\n} \n```\n\n\n:::\n:::\n\n\n\nLet's fit this model by passing in the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmite_bin <- mite\nmite_bin[mite_bin>0] <- 1\n\nmite_pa_list <- list(\n      Nsites = nrow(mite_bin),\n      S = ncol(mite_bin),\n      x = with(mite.env, (WatrCont - mean(WatrCont))/100),\n      y = as.matrix(mite_bin)\n    )\n\nall_species_unpooled_posterior <- \n  rstan::sampling(\n    all_species_unpooled,\n    data = mite_pa_list, \n    refresh = 1000, chains = 4\n  )\n```\n:::\n\n\n\nnow let's try to plot this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# start by looking at the names of variables\n# get_variables(all_species_unpooled_posterior)\n\npost_pred <- tidybayes::spread_rvars(all_species_unpooled_posterior, \n             intercept[spp_id], slope[spp_id]) |> \n  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> \n  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),\n         spp = colnames(mite_bin)[spp_id]) |> \n  ggplot(aes(x = water, dist = prob)) + \n  tidybayes::stat_lineribbon() + \n  facet_wrap(~spp) + \n  scale_fill_brewer(palette = \"Greens\")\n\npost_pred\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nWe can imitate the original figure by adding the observed data in orange:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost_pred + \n  geom_point(aes(x = water, y = presabs), \n             inherit.aes = FALSE, \n             data = mite_data_long_transformed,\n             pch = 21, \n             fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/stan_secret_weapon_fig-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-tip}\n### EXERCISE\n1) Add hierarchy to both the slope AND the intercept of this model. \nDo not try to model them as correlated: the `lmer` syntax would be `y ~ 1 + water + (1 | species) + (0 + water | species)`  \n\n2) Make a plot of the slope coefficients from both models, with and without hierarchy. \nAre they the same? How are they different?\n\n2) Make a posterior prediction of species richness in these communities.\n:::\n\n:::{.callout-note collapse=\"true\"}\n### SOLUTION\n\nFirst we rewrite the Stan model from above, replacing the standard deviations with parameters. We do this for the priors on the intercepts and slopes _separately_.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_species_partpooled <- stan_model(\n  file = \"topics/correlated_effects/all_species_partpooled.stan\")\n\nall_species_partpooled\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'anon_model' coded as follows:\ndata {\n  // number of rows in dataset\n  int<lower=0> Nsites;\n  // number of species\n  int<lower=0> S;\n  // one environmental variable to use in prediction\n  vector[Nsites] x;\n  // response site (rows) by species (columns) 2D array\n  array[Nsites,S] int <lower=0,upper=1> y;\n}\nparameters {\n  // parameters are now VECTORS\n  vector[S] intercept;\n  vector[S] slope;\n  real<lower=0> sigma_intercept;\n  real<lower=0> sigma_slope;\n  real avg_intercept;\n  real avg_slope;\n}\nmodel {\n  for (s in 1:S){\n    y[,s] ~ bernoulli_logit(intercept[s] + slope[s] * x);\n  }\n  // priors don't change because Stan is vectorized:\n  // every element of the vector gets the same prior\n  intercept ~ normal(avg_intercept, sigma_intercept);\n  slope ~ normal(avg_slope, sigma_slope);\n  avg_intercept ~ normal(0, 1);\n  avg_slope ~ normal(0, 1);\n  sigma_intercept ~ exponential(5);\n  sigma_slope ~ exponential(5);\n\n} \n```\n\n\n:::\n:::\n\n\n\nSample the model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_species_partpooled_posterior <- \n  sampling(\n    all_species_partpooled,\n    data = mite_pa_list, \n    refresh = 1000, chains = 4\n    )\n```\n:::\n\n\n\nPlot posterior predictions of trendlines, just as before:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost_pred_partpooled <- tidybayes::spread_rvars(all_species_partpooled_posterior, \n             intercept[spp_id], slope[spp_id]) |> \n  expand_grid(water = seq(from = -4, to = 4, length.out = 10)) |> \n  mutate(prob = posterior::rfun(plogis)(intercept + slope*water),\n         spp = colnames(mite_bin)[spp_id]) |> \n  ggplot(aes(x = water, dist = prob)) + \n  tidybayes::stat_lineribbon() + \n  facet_wrap(~spp) + \n  scale_fill_brewer(palette = \"Reds\") +\n  geom_point(aes(x = water, y = presabs), \n             inherit.aes = FALSE, \n             data = mite_data_long_transformed,\n             pch = 21, \n             fill = \"blue\")\n\npost_pred_partpooled\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### Comparing slope estimates of both models\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunpooled_slopes <- tidybayes::spread_rvars(all_species_unpooled_posterior, \n              slope[spp_id]) |> \n  mutate(type = \"non-hierarchical\")\n\npartpooled_slopes <- tidybayes::spread_rvars(all_species_partpooled_posterior, \n              slope[spp_id]) |> \n  mutate(type = \"hierarchical\")\n\n\npartpooled_slopes |> \n  bind_rows(unpooled_slopes) |> \n  mutate(species = colnames(mite_bin)[spp_id],\n         med_slope = median(slope),\n         species = forcats::fct_reorder(species, med_slope)) |> \n  ggplot(aes(x = species, dist = slope, colour = type)) + \n  stat_pointinterval(position = position_dodge(width = .5)) + \n  # facet_wrap(~type)\n  NULL\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Posterior distribution of species richness\n\nWe can always calculate things out of the posterior distribution, and get a new distribution which reflects the uncertainty in all our parameter estimates.  \nHere I'm suggesting we calculate the relationship between **species richness** and water concentration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidybayes::spread_draws(all_species_partpooled_posterior, \n             intercept[spp_id], slope[spp_id], ndraws = 700) |> \n  expand_grid(water = seq(from = -8, to = 6, length.out = 10)) |> \n  mutate(prob = plogis(intercept + slope*water),\n         spp = colnames(mite_bin)[spp_id]) |> \n  nest_by(water, .draw) |> \n  mutate(S = sum(data$prob)) |> \n  select(-data) |> unnest() |> \n  ggplot(aes(x = water, y = S)) + \n  tidybayes::stat_lineribbon() + \n  scale_fill_brewer(palette = \"Blues\", direction = -1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `cols` is now required when using `unnest()`.\nℹ Please use `cols = c()`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}