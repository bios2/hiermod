{
  "hash": "4731d68ff6b2ba9a78f777147283a557",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  Fitting an intercept-only model\ndescription: |\n  Where is the variation?\nexecute:\n  freeze: true\nformat:\n  html:\n    code-tools: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Variance partitioning with hierarchical models\n\nIts very useful to have an idea of where the variation is in a dataset, as a guide to model building and future data collection. Before collecting information on independent variables that you think might explain variation -- first find out how much variation there is! \n\nRandom intercepts give us a very handy way to investigate this: the so-called \"intercept only\" model. \nAt this point in the course we now have all the tools needed to build it. There are two steps: first we build a model with no predictors at all, only a random intercept for every grouping variable in the data (e.g. species, sites, years, regions). Then we examine the relative magnitudes of the standard deviations to see which is relatively larger or smaller.\n\n## Abundance of mites in different samples\n\nWe're going to build this by extending the observation level random effect model from the previous section. Remember that observation-level random effects are mostly useful for Poisson distributions! If you want to extend this model to other kinds of data, remember to remove that part of it.\n\n### Mathematical model\n\n$$\n\\begin{align}\n\\text{Abundance}_i &\\sim \\text{Poisson}(\\lambda_i) \\\\\n\\log{\\lambda_i} &\\sim \\mu + \\beta_{\\text{sample}[i]} + \\beta_{\\text{species[i]}} + \\beta_i\\\\\n\\mu &\\sim \\text{Normal}(3, 1)\\\\\n\\beta_{\\text{sample}} &\\sim \\text{Normal}(0,  \\sigma_{\\text{samp}})\\\\\n\\beta_{\\text{species}} &\\sim \\text{Normal}(0, \\sigma_{\\text{species}})\\\\\n\\beta_i &\\sim \\text{Normal}(0,                \\sigma_{\\text{obs}}) \\\\\n\\sigma_{\\text{samp}}    &\\sim \\text{Exponential}(3)\\\\\n\\sigma_{\\text{species}} &\\sim \\text{Exponential}(3)\\\\\n\\sigma_{\\text{obs}}     &\\sim \\text{Exponential}(3)\n\\end{align}\n$$\n\n### Load packages and prepare data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(dplyr))\nlibrary(ggplot2)\nlibrary(tidyr)\n# library(cmdstanr)\nsuppressPackageStartupMessages(library(rstan))\nrstan_options(\"auto_write\" = TRUE)\noptions(mc.cores = parallel::detectCores())\nlibrary(tidybayes)\n\n\ndata(\"mite\", package = \"vegan\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_names <- colnames(mite)\nspp_names <- setNames(1:ncol(mite), colnames(mite))\n\n\nmite_long <- mite |> \n  mutate(site_id = seq_len(nrow(mite))) |> \n  tidyr::pivot_longer(-site_id,\n                      names_to = \"spp\",\n                      values_to = \"abd\") |> \n  dplyr::mutate(spp_id = spp_names[spp])\n\nknitr::kable(head(mite_long))\n```\n\n::: {.cell-output-display}\n\n\n| site_id|spp     | abd| spp_id|\n|-------:|:-------|---:|------:|\n|       1|Brachy  |  17|      1|\n|       1|PHTH    |   5|      2|\n|       1|HPAV    |   5|      3|\n|       1|RARD    |   3|      4|\n|       1|SSTR    |   2|      5|\n|       1|Protopl |   1|      6|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_site_obs_intercepts <- stan_model(\n  file = \"topics/intercept_only/spp_site_obs_intercepts.stan\",\n  model_name = \"spp_site_obs_intercepts\")\n\nspp_site_obs_intercepts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'spp_site_obs_intercepts' coded as follows:\ndata{\n  int N;\n  int N_spp;\n  array[N] int<lower=1,upper=N_spp> spp_id;\n  int N_sites;\n  array[N] int<lower=1,upper=N_sites> site_id;\n  array[N] int abd;\n}\nparameters{\n  vector[N_spp] spp_effects;\n  vector[N_sites] site_effects;\n  vector[N] obs_effects;\n  real mu;\n  real<lower=0> sigma_spp;\n  real<lower=0> sigma_sites;\n  real<lower=0> sigma_obs;\n}\nmodel {\n  abd ~ poisson_log(mu + spp_effects[spp_id] + site_effects[site_id] + obs_effects);\n  spp_effects ~ normal(0, sigma_spp);\n  site_effects ~ normal(0, sigma_sites);\n  obs_effects ~ normal(0, sigma_obs);\n  mu ~ normal(3, 1);\n  sigma_spp ~ exponential(3);\n  sigma_sites ~ exponential(3);\n  sigma_obs ~ exponential(3);\n} \n```\n\n\n:::\n:::\n\n\n\nNow we can sample this model. \n\n:::{.callout-warning}\n## Warning: irresponsible statistics\nI'm sampling only 2 chains below, for illustration purposes only! use more chains in your research.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_site_obs_intercepts_samp <- rstan::sampling(\n  spp_site_obs_intercepts,\n  data = list(\n    N = nrow(mite_long),\n    N_spp = max(mite_long$spp_id),\n    spp_id = mite_long$spp_id,\n    N_sites = max(mite_long$site_id),\n    site_id = mite_long$site_id,\n    abd = mite_long$abd\n  ),chains = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.\nRunning the chains for more iterations may help. See\nhttps://mc-stan.org/misc/warnings.html#bulk-ess\n```\n\n\n:::\n\n```{.r .cell-code}\n# spp_site_obs_intercepts_samp$save_object(\"topics/intercept_only/spp_site_obs_intercepts.rds\")\n```\n:::\n\n\n\n## Exploring the model output\n\nThe output is large, so rather than showing all the parameters, I'm just going to count them. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(summary(spp_site_obs_intercepts_samp)$summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2560\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(mite_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2450\n```\n\n\n:::\n:::\n\n\n\nWe have fit many more parameters than observations! However, this model fits just fine, with no divergent iterations. These are one indication (not the only one!) that the model fit OK:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrstan::check_divergences(spp_site_obs_intercepts_samp)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n0 of 2000 iterations ended with a divergence.\n```\n\n\n:::\n:::\n\n\n\nLet's view the summary of only the standard deviations of the random effects (`sigma`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## let's look at the variance components\n\nsummary(spp_site_obs_intercepts_samp,\n        pars = c(\"sigma_spp\", \"sigma_sites\", \"sigma_obs\"))$summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mean     se_mean         sd      2.5%       25%       50%\nsigma_spp   1.513166 0.004749641 0.18336337 1.2044293 1.3817952 1.4972476\nsigma_sites 0.612151 0.002572284 0.07364724 0.4821773 0.5603805 0.6076508\nsigma_obs   1.487842 0.001963146 0.04230470 1.4077245 1.4589404 1.4871549\n                  75%     97.5%     n_eff      Rhat\nsigma_spp   1.6277827 1.9250226 1490.4024 0.9993863\nsigma_sites 0.6597966 0.7656913  819.7378 1.0000013\nsigma_obs   1.5157333 1.5750115  464.3785 1.0048531\n```\n\n\n:::\n:::\n\n\n\nAnd we can plot them also:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbayesplot::mcmc_areas(spp_site_obs_intercepts_samp,\n                      regex_pars ='sigma', \n                      border_size = 0.5)\n```\n\n::: {.cell-output-display}\n![Standard deviations of the mite dataset](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nAlternatively we can pull out posterior samples and make this figure ourselves:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_post <- rstan::extract(spp_site_obs_intercepts_samp,\n  pars = c(\"sigma_spp\", \"sigma_sites\", \"sigma_obs\"))\n\nsigma_post_df <- posterior::as_draws_df(sigma_post)\n\nsigma_post_df |> \n  pivot_longer(starts_with(\"sigma\"), \n               names_to = \"sigma\", \n               values_to = \"value\") |> \n  mutate(sigma = forcats::fct_reorder(sigma, value)) |> \n  ggplot(aes(y = sigma, x = value)) + \n  stat_dots()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Dropping 'draws_df' class as required metadata was removed.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThis can be a useful guide to future model building -- perhaps collecting data on species traits would help to improve a model's predictive power.\n\n### Calculate the posterior distribution of average abundance for each species\n\nWe can conceptualize this as a kind of \"averaged rank abundance plot\" for the species.\n\nTo do this we need to extract the average $mu$ and add it to the species effects, $\\beta_{\\text{species}}$\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp_mu_rvars <- spp_site_obs_intercepts_samp |> \n  tidybayes::spread_rvars(mu, spp_effects[spp_id])\n```\n:::\n\n::: {.cell layout-nrow=\"2\"}\n\n```{.r .cell-code}\nspp_effect_df <- spp_mu_rvars |> \n  mutate(spp_avg = mu + spp_effects,\n         species = names(spp_names)[spp_id],\n         species = forcats::fct_reorder(species, spp_avg))\n\nspp_effect_df |> \n  ggplot(aes(dist = spp_avg, y = species)) + \n  tidybayes::stat_slab(col = \"black\") + \n  # coord_flip() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Two visualizations of species average abundances, as measured by a random effects model which included random effects for site and site-species combinations. - species average abundances on the log scale - species average abundances on the observation scale.](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nspp_effect_df |> \n  mutate(spp_avg_count = exp(spp_avg),\n         species = forcats::fct_reorder(species, spp_avg, .desc = TRUE)) |> \n  ggplot(aes(dist = exp(spp_avg), x = species)) + \n  tidybayes::stat_pointinterval() + \n  # coord_flip() + \n  theme_minimal() + \n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![Two visualizations of species average abundances, as measured by a random effects model which included random effects for site and site-species combinations. - species average abundances on the log scale - species average abundances on the observation scale.](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}