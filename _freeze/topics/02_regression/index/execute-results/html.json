{
  "hash": "447281cb2177a8d1b296dc2977a3c058",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Univariate regression\"\ndescription: |\n  The shortest route to science is a straight line.\nexecute:\n  freeze: true\ncomments:\n  hypothesis: true\nformat:\n  html:\n    code-tools: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Load packages and data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n# library(cmdstanr)\nsuppressPackageStartupMessages(library(rstan))\nrstan_options(\"auto_write\" = TRUE)\noptions(mc.cores = parallel::detectCores())\nlibrary(tidybayes)\n```\n:::\n\n\n\n## Statistical models of Penguin bill morphology.\n\nWe'll be studying the relationship between two numbers about penguin bills. \nSpecifically, we'll ask **\"Are longer bills also deeper?\"**. \nThis question might not be the most interesting ecologically, but it is a great chance to practice some interesting stats.\n\nLet's begin with plotting the data: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) + \n  geom_point() + \n  stat_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Bill depth (mm) as predicted by bill length (mm) across the entire `palmerpenguins` dataset.](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nLet's write a simple statistical model for these data:\n\n$$\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times\\text{Bill length}_i \\\\\n\\beta_0 &\\sim \\text{Normal}(??) \\\\\n\\beta_1 &\\sim \\text{Normal}(??) \\\\\n\\sigma &\\sim \\text{Exponential}(??)\n\\end{align}\n$$\n\nWhat should our priors be? Before we can answer that, we have a more important question:\n\n:::{.callout-warning}\n# WHERE IS ZERO??\nIt has to be somewhere. Does it make sense? take control and choose for yourself.\n:::\n\nIf we fit a model like this **without** thinking about the location of zero, we get some pretty silly answers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_line <- coef(lm(bill_depth_mm ~ bill_length_mm, data = penguins))\n```\n:::\n\n\n\nWhen the value of bill length is 0, the average of the response is the intercept:\n\n$$\n\\begin{align}\n\\mu_i &= \\beta_0 + \\beta_1\\times\\text{Bill length}_i \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times0 \\\\\n\\mu_i &= \\beta_0 \\\\\n\\end{align}\n$$\n\nBut, if we take the data as we found it, we're going to be talking about $\\beta_0$ as the depth of a penguin's bill _when the bill has 0 length!_ Either way it is the same line. However, from the point of view of setting priors and interpreting coefficients, it helps a lot to set a meaningful 0.\n\nA very common choice is to **subtract the average** from your independent variable, so that it is equal to 0 at the average:\n\n$$\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times(\\text{Bill length}_i  - \\overline{\\text{Bill length}})\\\\\n\\beta_0 &\\sim \\text{Normal}(??) \\\\\n\\beta_1 &\\sim \\text{Normal}(??)\n\\end{align}\n$$\n\nNow $\\beta_0$ means the average _bill depth_ at the average _bill length_.  It becomes easier to think about priors:\n\n$$\n\\begin{align}\n\\text{Bill depth}_i &\\sim \\text{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1\\times(\\text{Bill length}_i  - \\overline{\\text{Bill length}})\\\\\n\\beta_0 &\\sim \\text{Normal}(17,2) \\\\\n\\beta_1 &\\sim \\text{Normal}(0,.5) \\\\\n\\sigma &\\sim \\text{Exponential}(0.5)\n\\end{align}\n$$\n\n:::{.callout-note}\n## Exercise\n\nWhat continuous predictors have you used in your analysis? How would you find a biologically meaningful zero? Think about how you would center time, age, mass, fitness etc.\n:::\n\n## Prior predictive simulations\n\nArmed with this model, it becomes much easier to think about prior predictions.\n\nWe'll make a bunch of lines implied by the equation above. There's two steps:\n\n1. Center the predictor\n2. Make up a vector that goes from the minimum to the maximum of the predictor. This is just for convenience!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_len_centered <- with(penguins,\n                          bill_length_mm - mean(bill_length_mm,\n                                                na.rm = TRUE))\n\n## make up a short vector\nsome_bill_lengths <- seq(\n  from = min(bill_len_centered, na.rm = TRUE), \n  to = max(bill_len_centered, na.rm = TRUE),\n  length.out = 10\n  )\n```\n:::\n\n\n\n:::{.callout-warning}\n## Shortcuts to these common tasks\n\nThese tasks are so common that they are automated in helper functions.\n\nFor centering predictors, see the base R function `?scale` (however, doing this by hand is often more convenient)\n\nFor creating a short vector over the range of a predictor, see `modelr::seq_range`. The R package [`modelr`](https://modelr.tidyverse.org/) has many different functions to help with modelling.\n:::\n\nTo simulate, we'll use some matrix algebra, as we saw in lecture:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslopes <- rnorm(7, 0, .5)\ninters <- rnorm(7, 17, 2)\n\nX <- cbind(1, some_bill_lengths)\nB <- rbind(inters, slopes)\n\nknitr::kable(head(X))\n```\n\n::: {.cell-output-display}\n\n\n|   | some_bill_lengths|\n|--:|-----------------:|\n|  1|       -11.8219298|\n|  1|        -8.7663743|\n|  1|        -5.7108187|\n|  1|        -2.6552632|\n|  1|         0.4002924|\n|  1|         3.4558480|\n\n\n:::\n\n```{.r .cell-code}\nknitr::kable(head(B))\n```\n\n::: {.cell-output-display}\n\n\n|       |           |           |           |           |           |          |           |\n|:------|----------:|----------:|----------:|----------:|----------:|---------:|----------:|\n|inters | 20.0043832| 18.7154328| 15.2272188| 16.3241250| 15.3094525| 14.503924| 12.5317379|\n|slopes | -0.3153835|  0.0860523| -0.0496798|  0.2555364| -0.8804651|  1.152602|  0.3816751|\n\n\n:::\n\n```{.r .cell-code}\nprior_mus <- X %*% B\n\nmatplot(x = some_bill_lengths,\n        y = prior_mus, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-note}\n## Exercise\n\nCopy the code above. Increase the number of simulations. Which priors are too wide? Which are too narrow?\n:::\n\n### Simulating Observations\n\nThere are always at least TWO kinds of predictions we can be thinking about: \n\n1. Predicted averages. This is often called a \"confidence\" interval for a regression line.\n2. Predicted observations. This is often called a \"prediction\" interval.\n\nWe can use the full model to simulate observations! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslopes <- rnorm(7, 0, .5)\ninters <- rnorm(7, 17, 2)\nsigmas <- rexp(7, rate = 0.3)\n\nX <- cbind(1, some_bill_lengths)\nB <- rbind(inters, slopes)\n\nprior_mus <- X %*% B\n\nprior_obs <- matrix(0, nrow = nrow(prior_mus), ncol = ncol(prior_mus))\n\nfor (j in 1:ncol(prior_obs)) {\n  prior_obs[,j] <- rnorm(n = nrow(prior_mus),\n                         mean = prior_mus[,j],\n                         sd = sigmas[j])\n}\n\nmatplot(x = some_bill_lengths,\n        y = prior_obs, type = \"p\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nTidyverse style for those who indulge:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  sim_id = 1:7,\n  slopes = rnorm(7, 0, .5),\n  inters = rnorm(7, 17, 2),\n  sigmas = rexp(7, rate = 0.2)\n  ) |> \n  mutate(x = list(seq(from = -10, to = 10, length.out = 6))) |> \n  rowwise() |> \n  mutate(avg = list(x * slopes + inters),\n         obs = list(rnorm(length(avg), mean = avg, sd = sigmas)),\n         sim_id = as.factor(sim_id)) |> \n  unnest(cols = c(\"x\", \"avg\", \"obs\")) |> \n  ggplot(aes(x= x, y = avg, group = sim_id, fill = sim_id)) + \n  geom_line(aes(colour = sim_id)) + \n  geom_point(aes(y = obs, fill = sim_id), pch = 21, size = 3) + \n  scale_fill_brewer(type = \"qual\") + \n  scale_colour_brewer(type = \"qual\") + \n  facet_wrap(~sim_id)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-tip}\n### EXERCISE\nPick one of the two simulations above and modify it. Here are some suggested modifications:\n\n* Experiment with priors that are \"too narrow\" or \"too wide\". \n* Try a different distribution than the one used\n* Instead of bill size, imagine that we are applying this model to YOUR data. What would you change?\n:::\n\n## Linear regression in Stan\n\nNow we write a Stan program for this model. \nWe'll begin with a simple model that has no posterior predictions:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_regression_no_prediction <- stan_model(\n  file = here::here(\"topics/02_regression/normal_regression_no_prediction.stan\"),\n  model_name = \"normal_regression_no_prediction\")\n\nnormal_regression_no_prediction\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'normal_regression_no_prediction' coded as follows:\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n}\nparameters {\n  real intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  bill_dep ~ normal(intercept + slope * bill_len, sigma);\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n  sigma ~ exponential(.7);\n} \n```\n\n\n:::\n:::\n\n\n\nIn order to get the posterior, we need to put our data in Stan. We follow the same steps as previously:\n\n* Remember to remove NAs first!  \n* arrange the data in a list\n* pass the data to a Stan model to estimate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## drop NAs\npenguins_no_NA <- penguins |> \n  tidyr::drop_na(bill_depth_mm, bill_length_mm) |> \n  dplyr::mutate(\n    bill_length_center = bill_length_mm - mean(bill_length_mm))\n\n## assemble data list\ndata_list <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm\n          ))\n\n## run the sampler, using the compiled model.\nnormal_reg_no_pred <- sampling(\n  object = normal_regression_no_prediction,\n  data = data_list, \n  refresh = 0)\n\nsummary(normal_reg_no_pred)$summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mean      se_mean         sd         2.5%           25%\nintercept   17.15264142 0.0016478829 0.10394263   16.9494352   17.08278951\nslope       -0.08446108 0.0002923144 0.01935945   -0.1229168   -0.09731406\nsigma        1.92559056 0.0011383070 0.07272603    1.7911089    1.87472178\nlp__      -395.70062075 0.0280828697 1.21376995 -398.7778319 -396.23858530\n                    50%           75%         97.5%    n_eff      Rhat\nintercept   17.15126450   17.22298166   17.35427811 3978.641 0.9996253\nslope       -0.08447768   -0.07117767   -0.04613487 4386.172 0.9992985\nsigma        1.92436607    1.97329214    2.07514721 4081.887 0.9995621\nlp__      -395.37216385 -394.83935677 -394.31874118 1868.056 1.0001991\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_no_pred |> \n  bayesplot::mcmc_areas(pars = c(\"slope\", \"intercept\", \"sigma\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-tip}\n### EXERCISE\n**Discussion** : Look just at the posterior distribution of the slope right above. \nDo we have evidence that there's a relationship between bill length and bill depth.\n:::\n\n## Posterior predictions in R\n\nWe can calculate a posterior prediction line directly in R for these data.\nI'll show each step in this workflow separately:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_no_pred |> \n  spread_rvars(slope, intercept, sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n            slope  intercept        sigma\n       <rvar[1d]> <rvar[1d]>   <rvar[1d]>\n1  -0.084 ± 0.019   17 ± 0.1  1.9 ± 0.073\n```\n\n\n:::\n:::\n\n\n\n`tidybayes` helps us extract the posterior distribution of the parameters into a convenient object called an `rvar`. \nLearn more about tidybayes [here](http://mjskay.github.io/tidybayes/articles/tidybayes.html) and about the rvar datatype [here](https://mc-stan.org/posterior/articles/rvar.html)\n\nNext we combine these posteriors with a vector of observations to make a posterior distribution of LINES:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_predline <- normal_reg_no_pred |> \n  tidybayes::spread_rvars(slope, intercept) |> \n  expand_grid(x = seq(from = -15, to = 15, length.out = 5)) |> \n  mutate(mu = intercept + slope*x)\n\nknitr::kable(normal_reg_predline)\n```\n\n::: {.cell-output-display}\n\n\n|slope          |intercept |     x|mu        |\n|:--------------|:---------|-----:|:---------|\n|-0.084 ± 0.019 |17 ± 0.1  | -15.0|18 ± 0.31 |\n|-0.084 ± 0.019 |17 ± 0.1  |  -7.5|18 ± 0.18 |\n|-0.084 ± 0.019 |17 ± 0.1  |   0.0|17 ± 0.10 |\n|-0.084 ± 0.019 |17 ± 0.1  |   7.5|17 ± 0.18 |\n|-0.084 ± 0.019 |17 ± 0.1  |  15.0|16 ± 0.31 |\n\n\n:::\n:::\n\n\n\nFinally we'll plot these:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_predline |> \n  ggplot(aes(x = x, dist = mu)) + \n  stat_lineribbon() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             inherit.aes = FALSE,\n             data = penguins_no_NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n#### Using posterior draws individually\n\nThe above workflow makes a nice figure, but perhaps it helps to see the individual lines to understand what is happening here. \nWe can get these with another tidybayes function `spread_draws`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_predline_draws <- normal_reg_no_pred |> \n  tidybayes::spread_draws(slope, intercept, ndraws = 10)\n\nknitr::kable(normal_reg_predline_draws)\n```\n\n::: {.cell-output-display}\n\n\n| .chain| .iteration| .draw|      slope| intercept|\n|------:|----------:|-----:|----------:|---------:|\n|      2|        338|  1338| -0.0731880|  17.10257|\n|      2|        694|  1694| -0.0547486|  16.87400|\n|      3|        960|  2960| -0.1176134|  17.38026|\n|      3|        358|  2358| -0.0917159|  17.14285|\n|      1|        556|   556| -0.1049648|  17.30690|\n|      2|        178|  1178| -0.1128396|  17.20734|\n|      3|        965|  2965| -0.0640296|  17.08314|\n|      3|        769|  2769| -0.0609063|  17.27854|\n|      2|        734|  1734| -0.1219895|  17.11492|\n|      1|        946|   946| -0.0618891|  17.11427|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_reg_predline_draws |> \n  expand_grid(x = seq(from = -15, to = 15, length.out = 5)) |> \n  mutate(mu = intercept + slope*x) |> \n  ggplot(aes(x = x, y = mu, group = .draw)) + \n  geom_line() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             inherit.aes = FALSE,\n             data = penguins_no_NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Posterior predictions in Stan\n\nWe can also make these posterior predictions in Stan.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_regression <- stan_model(file = here::here(\"topics/02_regression/normal_regression.stan\"))\n\nnormal_regression\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'anon_model' coded as follows:\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n  // posterior predictions\n  int<lower=0> npost;\n  vector[npost] pred_values;\n}\nparameters {\n  real intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  bill_dep ~ normal(intercept + slope * bill_len, sigma);\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n}\ngenerated quantities {\n  vector[npost] post_bill_dep_obs;\n  vector[npost] post_bill_dep_average;\n\n  // calculate expectation\n  post_bill_dep_average = intercept + slope * pred_values;\n\n  // make fake observations\n  for (i in 1:npost) {\n    post_bill_dep_obs[i] = normal_rng(intercept + slope * pred_values[i], sigma);\n  }\n\n} \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_no_NA <- penguins |> \n  tidyr::drop_na(bill_depth_mm, bill_length_mm) |> \n  dplyr::mutate(\n    bill_length_center = bill_length_mm - mean(bill_length_mm))\n\ndata_list <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm,\n          npost = 6,\n          pred_values = modelr::seq_range(penguins_no_NA$bill_length_center, n = 6)\n          ))\n\nbill_norm_reg <- sampling(normal_regression,\n                          data = data_list, \n                          refresh = 0)\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nbill_posterior <- bill_norm_reg |> \n  tidybayes::spread_rvars(post_bill_dep_average[i],\n                          post_bill_dep_obs[i]) |>\n  mutate(bill_length = data_list$pred_values[i]) \n\nbill_posterior |> \n  ggplot(aes(x = bill_length, dist = post_bill_dep_average)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Greens\", direction = -1, guide = \"none\") + \n  labs(title = \"Average response\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbill_posterior |> \n  ggplot(aes(x = bill_length, dist = post_bill_dep_obs)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center, y = bill_depth_mm),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Greens\", direction = -1, guide = \"none\") +\n  labs(title = \"Predicted observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\n\n:::{.callout-tip}\n### EXERCISE\nExtend this model to include species. Specifically, let each species have its own value of the `intercept`. This involves combining this regression example with the previous activity on discrete predictors.\n\nWhen you're done, look at the resulting summary of coefficients. What do you notice that's different?\n::: \n\n:::{.callout-note collapse=\"true\"}\n### SOLUTION\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormal_regression_spp <- stan_model(file = here::here(\"topics/02_regression/normal_regression_spp.stan\"),\n                                    model_name = \"normal_regression_spp\")\n\nnormal_regression_spp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` stan\nS4 class stanmodel 'normal_regression_spp' coded as follows:\ndata {\n  int<lower=0> N;\n  vector[N] bill_len;\n  vector[N] bill_dep;\n  // species IDs\n  array[N] int spp_id;\n  // posterior predictions\n  int<lower=0> npost;\n  vector[npost] pred_values;\n  array[npost] int pred_spp_id;\n}\nparameters {\n  vector[3] intercept;\n  real slope;\n  real<lower=0> sigma;\n}\nmodel {\n  intercept ~ normal(17, 2);\n  slope ~ normal(0, 1);\n  sigma ~ exponential(.7);\n  bill_dep ~ normal(intercept[spp_id] + slope * bill_len, sigma);\n}\ngenerated quantities {\n  vector[npost] post_bill_dep_obs;\n  vector[npost] post_bill_dep_average;\n\n  // calculate expectation\n  post_bill_dep_average = intercept[pred_spp_id] + slope * pred_values;\n\n  // make fake observations\n  for (i in 1:npost) {\n    post_bill_dep_obs[i] = normal_rng(intercept[pred_spp_id[i]] + slope * pred_values[i], sigma);\n  }\n\n} \n```\n\n\n:::\n:::\n\n\n\nWe set up a list for this model just as we did before. \nNote that this time we are using TRIPLE the `pred_values`, because we want to run independent predictions for each species.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_vec <- modelr::seq_range(penguins_no_NA$bill_length_center, n = 6)\n\ndata_list_spp <- with(penguins_no_NA,\n     list(N = length(bill_length_center),\n          bill_len = bill_length_center,\n          bill_dep = bill_depth_mm,\n          spp_id = as.numeric(as.factor(species)),\n          npost = 3*6,\n          pred_values = rep(bill_vec, 3),\n          pred_spp_id = rep(1:3, each = 6)\n          ))\n\nnormal_reg_spp_post <- sampling(normal_regression_spp,\n                                data = data_list_spp, refresh = 0)\n```\n:::\n\n\n\nNote that the sign of the slope is different now! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(normal_reg_spp_post)$summary |> \n  head(5) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|             |       mean|   se_mean|        sd|       2.5%|        25%|        50%|        75%|      97.5%|    n_eff|      Rhat|\n|:------------|----------:|---------:|---------:|----------:|----------:|----------:|----------:|----------:|--------:|---------:|\n|intercept[1] | 19.3587311| 0.0025534| 0.1155090| 19.1352778| 19.2812960| 19.3576779| 19.4370161| 19.5895913| 2046.421| 1.0016469|\n|intercept[2] | 17.4446511| 0.0029852| 0.1436438| 17.1607185| 17.3470405| 17.4425066| 17.5432696| 17.7246031| 2315.400| 1.0003934|\n|intercept[3] | 14.2789976| 0.0022699| 0.1075275| 14.0677759| 14.2064398| 14.2771284| 14.3509485| 14.4903548| 2243.943| 1.0007074|\n|slope        |  0.1982317| 0.0004189| 0.0173236|  0.1646094|  0.1861981|  0.1982558|  0.2100545|  0.2323654| 1710.421| 1.0023685|\n|sigma        |  0.9569830| 0.0006108| 0.0366812|  0.8888225|  0.9308345|  0.9564269|  0.9819058|  1.0300383| 3606.954| 0.9994974|\n\n\n:::\n:::\n\n\n\n:::\n\n### Plotting posterior predictions\n\nUsing `stat_lineribbon()`, let's plot the average and predicted intervals for this regression.\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nbill_posterior <- normal_reg_spp_post |> \n  tidybayes::spread_rvars(post_bill_dep_average[i],\n                          post_bill_dep_obs[i]) |>\n  mutate(bill_length = data_list_spp$pred_values[i],\n         spp = data_list_spp$pred_spp_id) |> \n  mutate(spp = as.factor(levels(penguins$species)[spp]))\n\nbill_posterior |> \n  ggplot(aes(x = bill_length,\n             ydist = post_bill_dep_average,\n             fill = spp, \n             colour = spp)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center,\n                 y = bill_depth_mm,\n                 fill = species, colour = species),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) +   \n  scale_fill_brewer(palette = \"Set2\") +\n  scale_color_brewer(palette = \"Dark2\") + \n  labs(title = \"Average response\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbill_posterior |> \n  ggplot(aes(x = bill_length,\n             dist = post_bill_dep_obs,\n             fill = spp,\n             colour = spp)) + \n  tidybayes::stat_lineribbon() + \n  geom_point(aes(x = bill_length_center,\n                 y = bill_depth_mm,\n                 colour = species),\n             data = penguins_no_NA, \n             inherit.aes = FALSE) + \n  scale_fill_brewer(palette = \"Set2\") +\n  scale_color_brewer(palette = \"Dark2\") + \n  labs(title = \"Predicted observations\") + \n  facet_wrap(~spp, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-2.png){width=672}\n:::\n:::\n\n\n\n## Exercise! \n\nShow how the $\\sigma$ is different between these two models     \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}